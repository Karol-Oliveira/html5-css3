--------------- MODULO 4 -------------

IFRAME 

Um iframe é basicamente uma “janela aberta” dentro da
nossa página para apresentar o conteúdo de outras páginas.
Esse é um recurso bem antigo, presente desde as versões anteriores da HTML, mas que até hoje são utilizados por alguns sites, o que causa muita discussão em relação a segurança. Vamos abordar esse assunto mais pra frente, mas antes vamos aprender a usar esse recurso.

    <h1>Teste de iframe</h1>
    <p>Acessando o site do
        <iframe src="https://www.cursoemvideo.com" frameborder="0" scrolling="no"></iframe>
    para aprender a programar.</p>

alguns sites não aceita colocar seu conteúdo dentro de iframes 

Por padrão o tamanho de um iframe é de 300x150px 

---A propriedade scrolling aceita três valores:

• no - não permite a rolagem da página, mesmo que ela seja maior que o tamanho estabelecido para o frame.

• yes - habilita a rolagem do conteúdo, mesmo que seu conteúdo não seja grande o suficiente para preencher o frame.

• auto - (padrão) a rolagem é habilitada apenas se o conteúdo for maior que o tamanho do quadro estabelecido. 

Alguns navegadores em celulares mais antigos bloqueiam este recurso por isso talvez seja interessante adicionar um link <a> com uma frase entre o <iframe> e </iframe> que levara a pessoa para este site.


DIRECIONANDO NOVO CONTEÚDO PARA UM IFRAME

	Podemos dar ordens a um quadro para trocar o seu conteúdo através de links ou códigos JavaScript. O primeiro passo é dar um nome a ele através do parâmetro name. 
	 

 <iframe id="tela" name="quadro"> Infelizmente seu navegador não é compativel com este recurso</iframe>

No link dentro do target ao invés de colocar os seus valores colocamos o valor que usamos em name


    <ul>
        <li><a href="paginas-extras/pagina001.html" target="quadro">Primeira página</a></li>
        <li><a href="paginas-extras/pagina002.html" target="quadro">Segunda página</a></li>
        <li><a href="paginas-extras/pagina003.html" target="quadro">Terceira página</a></li>
    </ul>

isso fará com que o conteúdo das paginas abram dentro do iframe.



GERANDO CONTEUDO DENTRO DO IFRAME 
	
	
	No lugar de usar o parâmetro src para indicar a origem (souce) do conteúdo de um quadro, podemos usar o parâmetro srcdoc para criar um conteúdo simples estaticamente dentro do iframe.

<iframe id="tela" name="quadro" srcdoc="<h1>Escolha uma das opções acima</h1> <p> Lorem ipsum dolor sit amet consectetur adipisicing elit. A eveniet ipsam tenetur ut nam quod recusandae iusto placeat, quis maxime omnis reprehenderit at, nobis laboriosam ipsa quam!</p><img src='imagens/wallpaper002.jpg'>"> Infelizmente seu navegador não é compativel com este recurso</iframe>

O recomendado é criar um arquivo separado e inserir o site.


PROBLEMAS QUE UM IFRAME PODE TRAZER PARA O SEU SITE

(no confunda iframe com frame)


• Problemas com mecanismos de busca.

	Segundo o próprio Google, podem acontecer problemas com a indexação de conteúdos contidos dentro de iframes e talvez não haja uma boa relação entre o que está fora (na página principal) e o que está dentro (na parte interna do iframe). 


• A usabilidade.

	Ao decidir usar iframes para apresentar conteúdos em
nosso site, saiba que existem alguns incômodos relativos
à usabilidade e acessibilidade desse conteúdo. 
	ex- O botão de voltar para a página anterior no navegador fica meio perdido, sem saber se quer voltar no site externo ou dentro do iframe.
	   Confunde os usuários quando um site que está dentro de um iframe tenta abrir uma página em uma nova janela.
	    Se o site a ser aberto não for responsivo, provavelmente vai ficar visualmente quebrado ou esquisito dentro de um iframe na tela de um celular
	
• Segurança.
 	Ao usar iframe em projetos que vão efetivamente ao ar, devemos tomar o cuidado de dificultar as ações cruzadas e as relações entre o nosso site e aquele apresentado dentro do quadro. Isso pode deixar seu site vulnerável a ataques do tipo cross-site e seus visitantes suscetíveis a ataques XSS.
Mas nem tudo está perdido e podemos proteger um pouco mais nosso site usando configurações de sandbox e definindo políticas de referência mais restritivas. E é sobre isso que falaremos nos próximos tópicos desse capítulo. 



TORNANDO AS COISAS MAIS SEGURAS

SANDBOX 

	
	Cientes dos problemas que um iframe mal configurado pode trazer, a HTML5 implementou o novo recurso de sandbox. Uma
caixa de areia (sandbox) é um ambiente controlado que permite
exibir outros sites para seu visitante sem que ele possa “tomar
controle” do site principal e aos dados do visitante.
Quando habilitamos a sandbox em nosso iframe, automaticamente o site que está dentro do quadro perde algumas funcionalidades, dentre elas:

• Não pode mais enviar dados de formulários
• Não pode mais executar scripts
• Desabilita todo tipo de API, janelas modais e popups
• Desabilita todo tipo de plugin com <embed>, <object>, <applet>
• Evita que o site dentro do iframe assuma a navegação top level do navegador
• Bloqueia recursos como autoplay e foco automático em elementos de formulário

Para carregar um site dentro de um quadro iframe em ambiente protegido, basta declarar:

<iframe src="paginas-extras/pagina004.html" sandbox="sandbox">
        Seu navegador não é compatível com este recurso
</iframe>


Usar a propriedade sandbox com o valor sandbox (entre aspas) vai ligar todos os bloqueios citados acima.
Caso queira abrir alguma excessão e desbloquear algum dos recursos pontualmente, poderá usar um ou mais valores da lista a seguir:

• allow-forms
• allow-scripts
• allow-modals
• allow-popups
• allow-same-origin
• allow-top-navigation


POLÍTICA DE REFERÊNCIA

Outra maneira de limitar a ação de sites que carregarmos em nossos iframes é configurando a política de referência (referral policy).

Ao configurar a propriedade referrerpolicy em um iframe, conseguimos definir quantos dados serão compartilhados com o site de destino. A maneira de manter a navegação mais “anônima” é usar o valor no-referer para esse atributo.

Existem outros valores, como:

• no-referrer-when-downgrade (padrão)
• origin
• origin-when-cross-origin
• same-origin
• strict-origin
• strict-origin-when-cross-origin
• unsafe-url
• no-referrer = não vai permitir capturar dados nenhum 

<iframe src="paginas-extras/pagina004.html" sandbox="sandbox" referrerpolicy="no-referrer">
        Seu navegador não é compativel com este recurso
</iframe>

DICAS PARA IFRAMES MELHORES 

Vídeos
Mapas do Google
Mapas do Waze
Google Documents


---------------------------------------------------------------

FORMULÁRIO

   <form>
        <p>Nome: <input type="text" name="nome" id="nome"></p>
        <p>Sobrenome: <input type="text" name="sobrenome" 	id="sobrenome"></p>
        <p><input type="submit" value="Enviar"></p>
   </form>


A primeira e a última linhas vão delimitar o formulário. Tudo aquilo que estiver dentro desse par de tags será considerado como conteúdo dos campos. 

Precisamos fazer algumas configurações adicionais para que esse formulário funcione de maneira mais semântica e correta. 

• Em primeiro lugar, vamos adicionar dois atributos importantes à tag <form>: o method e o action. O primeiro vai indicar o método de envio dos dados e o segundo vai dizer para onde os dados serão enviados.

• Não existe nenhuma ligação semântica entre a caixa de texto e seu identificador. Para isso, vamos adicionar um <label> para que possa ser feito o relacionamento entre o campo e seu identificador.

• Para que o <label> possa funcionar corretamente, a caixa de texto deverá ter um id. 

autocomplet ="off" desligar as sugestões de preenchimento

LABEL (importante)

<form action="cadastro.php">
        <p>
            <label for="inome">Nome:</label> 
            <input type="text" name="nome" id="inome">
        </p>
        <p>
            <label for="isobrenome">Sobrenome:</label> 
            <input type="text" name="sobrenome" id="isobrenome">
        </p>
        <p>
            <input type="submit" value="Enviar">
        </p>
   </form>



METODOS DE ENVIO DE FORMULÁRIOS 

existe dois métodos que são simples para envio de formulário
o método padrão é GET, o outro método é POST que oculta os dados do URL mas  não significa que seus dados estão seguros.


<form method="get" action="cadastro.php">
        <p>
            <label for="inome">Nome:</label> 
            <input type="text" name="nome" id="inome">
        </p>
        <p>
            <label for="isobrenome">Sobrenome:</label> 
            <input type="text" name="sobrenome" 		    id="isobrenome">
        </p>
        <p>
            <input type="submit" value="Enviar">
        </p>
   </form>


APRENDER SOBRE HTTPS PARA PROTEGER DADOS 

quando se envia os dados pelo método get você so pode enviar ate 3mil Byts 


Em primeiro lugar, podemos usar GET em um formulário contanto que:

• Os dados a serem enviados não sejam sensíveis, como endereços, números de documentos, senhas, etc.

• Tivermos formulários simples e que possam ser compartilhados facilmente através de uma URL. Por exemplo, o Google usa GET no seu formulário, pois você pode enviar um link para qualquer pessoa, já com a ação da busca embutida, como em http://google.com.br/search?q=Gustavo+Guanabara

• Os dados a serem enviados nunca ultrapassem 3000 bytes.

• Não contenha envio de arquivos como imagens (i.e. fotos de perfil), arquivos PDF, etc.


Já o método POST é mais recomendado para casos em que:

• Não queremos que os dados apareçam explicitamente na URL do navegador.

• Capturamos dados como senhas, documentos e outro tipo de dado sensível.

• Precisamos enviar muitos dados (acima de 3000 bytes ~ sem limites).

• Precisamos enviar imagens ou outros tipos de arquivos. 



<h1>Teste de Formulário</h1>

    <form action="cadastro.php" method="post">

        <!--campo de usuario-->
        <p>
            <label for="iusu">Usuário:</label>
            <input type="text" name="usu" id="iusu" required minlength="5" maxlength="15" size="10">
        </p>
        <!--campo de senha-->
        <p>
            <label for="isen">Senha:</label>
            <input type="password" name="sen"  id="isen" required minlength="8">
        </p>
        <!--botões de enviar/limpar-->
        <p>
            <input type="submit" value="Enviar">
           <input type="reset" value="Limpar">
        </p>
        <!--required torna o preenchimento do campo obrigatorio-->
    </form>


O uso dos parâmetros minlength="5" maxlength="15" determina o número mínimo e máximo de caracteres permitidos

SIZE para definir o tamanho da caixa ( numero de caracteres exibidos)  

Formulário normalmente tem um autocomplete ligado.
Autocomplete colocado no input tem diversas opções diferente de quando se coloca direto na tag form que é so ON  e OFF 


Para INPUT DO TIPO NUMERO para definir o máximo e o mínimo usamos apenas min e max e para contabilizar números decimais tipo 5.5 usamos o comando step e indicamos o intervalo que queremos 

<p>
      <label for="imedia">Média:</label>
      <input type="number" name="media" id="imedia" min="0"                                     
      max="10" placeholder="0 a 10" step="0.1" required> 
</p>

Para deixa um preenchimento sugerido usamos value="" este comando automaticamente tira o placeholder.


ESTUDAR MAIS SOBRE REGEX ( EXPRESSÕES REGULARES )

Regex, ou expressões regulares, é uma ferramenta poderosa para busca e manipulação de textos. Elas permitem definir padrões que identificam combinações de caracteres em strings, sendo amplamente utilizadas em linguagens de programação, editores de texto, ferramentas de busca, entre outros.

Aqui está uma visão geral de componentes comuns em regex:

1. Metacaracteres

Esses símbolos têm significados especiais:

. : Corresponde a qualquer caractere, exceto quebra de linha.
^ : Início da string.
$ : Final da string.
* : Zero ou mais ocorrências do caractere/padrão anterior.
+ : Uma ou mais ocorrências do caractere/padrão anterior.
? : Zero ou uma ocorrência do caractere/padrão anterior.
{n} : Exatamente n ocorrências.
{n,} : Pelo menos n ocorrências.
{n,m} : Entre n e m ocorrências.

2. Classes de caracteres

Definem grupos de caracteres permitidos:

[abc] : Corresponde a a, b, ou c.
[^abc] : Corresponde a qualquer caractere que não seja a, b, ou c.
[a-z] : Intervalo de a a z.
[A-Z] : Intervalo de A a Z.
[0-9] : Intervalo de dígitos (0 a 9)
.
3. Sequências especiais

\d : Dígitos ([0-9]).
\D : Não dígitos ([^0-9]).
\w : Caractere de palavra (letras, dígitos, _).
\W : Não caracteres de palavra.
\s : Espaço em branco (espaços, tabs, quebras de linha).
\S : Não espaços em branco.

4. Agrupamentos e referências

(abc) : Agrupa padrões (permite aplicar operadores como +, * ou referenciar o grupo).
| : Alternativa lógica (ex.: a|b corresponde a a ou b).
\1, \2, etc.: Referências a grupos capturados.
5. Modificadores (Flags)
i : Ignora diferenças entre maiúsculas e minúsculas.
g : Procura por todas as correspondências (global).
m : Modo multilinha (permite ^ e $ funcionarem em várias linhas).
s : Permite que . corresponda a quebras de linha.



        <p>
            <label for="itel">Telefone</label>
            <input type="tel" name="tel" id="itel" 		    
	     autocomplete="tel" required placeholder="(DDD) 	    
             99999-9999" pattern="^[0-9]{2}-[0-9]{5}-[0-9]{4}$">

        </p>


<fieldset> == é usado para agrupar elementos relacionados dentro de um formulário, oferecendo uma maneira semântica e visual de organizar informações. Geralmente, ele é acompanhado pelo elemento <legend>, que serve para dar um título ao grupo.


input do tipo radio = Esses botões permitem que o usuário escolha apenas uma entre várias opções de um grupo. Para que isso ocorra é necessário colocar o atributo name com o mesmo valor 


    <fieldset>
            <legend>Sexo</legend>
            <input type="radio" name="genero" id="isxmas"><label for="isxmas">Masculino</label><br>
            <input type="radio" name="genero" id="isxfem" checked><label for="isxfem">Feminino</label><br>
    </fieldset>

para deixa uma opção sugerida usamos o atributo checked


input:file = Envio de Arquivo

quando utilizar o controle de envio de arquivos não devemos usar o método get e sim o post 


OUTRAS MANEIAS DE FAZE FORMULÁRIOS

 <form action="" method="get">
        <p>
            <label for="iest">Estado</label>

            <select name="estado" id="iest">
                <option value="">--- Escolha ---</option>
                <optgroup label="Região Sudeste">
                    <option value="MG">Minas Gerais</option>
                    <option value="RJ">Rio de Janeiro</option>
                    <option value="SP">São Paulo</option>
                </optgroup>

                <optgroup label="Região Nordeste">
                    <option value="RN">Rio Grande do Norte</option>
                    <option value="PE">Pernambuco</option>
                    <option value="MA">Maranhão</option>
                </optgroup>
            </select>
        </p>
        <p>
            <label for="iprof">Profissão</label>
            <input type="text" name="prof" id="iprof" list="listprof">
            <datalist id="listprof">
                <option value="ADM">Administrador</option>
                <option value="CONT">Contador</option>
                <option value="DEV">Desenvolvedor</option>
                <option value="PROF">Professor</option>
            </datalist>
        </p>
        <p>
            <input type="submit" value="Enviar">
            <input type="reset" value="Limpar">
        </p>
    </form>



select = te permite apenas selecionar uma opção da lista 

datalist combinado com o input text premite além de selecionar o da lista digitar caso não tenha essa opção. 


Caixa de texto  

<textarea name="msg" id="imsg" cols="30" rows="10"></textarea> 

	cols= numero de colunas que vai aparecer na tela 
	rows= numero de linhas que vai aparecer na tela

	<p>
            <label for="imsg">Mensagem</label><br>
            <textarea name="msg" id="imsg" cols="30" rows="10" placeholder="Digite sua Mensagem" maxlength="140"></textarea>
        </p>




OUTPUT ==  pode ser usado para executar tarefas simples e gerar uma saída na tela.



<form action="#" method="post" autocomplete="on">
        <p>
            <label for="in1">Numero 1:</label>
            <input type="number" name="n1" id="in1" min="0" max="50" required oninput="isoma.innerHTML = Number(in1.value) + Number(in2.value)">
        </p>
        <p>
            <label for="in2">Numero 2:</label>
            <input type="number" name="n2" id="in2" min="0" max="50" required oninput="isoma.innerHTML = Number(in1.value) + Number(in2.value)">
        </p>

        <p>
            <label for="isoma">Soma:</label>
            <output name="soma" id="isoma"></output>
        </p>

        <p>
            <input type="submit" value="Enviar">
            <input type="reset" value="Limpar">
        </p>
    </form>


--------------------------------------------------------------

MEDIA QUERIES

Media Query = Media Types +  Media Features

Media Query para impressão e telas

Esse é o primeiro passo para fazer om site Media Query, criar um arquivo css para estilizar o site para telas e outro arquivo css para impressão.

<link rel="stylesheet" href="estilo/tela.css" media="screen">

<link rel="stylesheet" href="estilo/impressora.css" media="print">


em cada arquivo css você configura da sua maneira lembrando sempre da semântica.

Media Types

-- media="screen"

-- media="print"

-- media="all"

Media Features (complemento/ característica de media) 

-- configuração para todas as telas em modo retrato ficaram dentro deste arquivo css

<link rel="stylesheet" href="estilo/retrato.css" media="screen and (orientation: portrait)"> 


-- configuração para todas as telas em modo paisagem ficaram dentro deste arquivo css

<link rel="stylesheet" href="estilo/paisagem.css" media="screen and (orientation:landscape)">


-- Para todo tipo de media ( configurações gerais que se aplica a todo tipo de media.)

<link rel="stylesheet" href="estilo/style.css" media="all"> 












